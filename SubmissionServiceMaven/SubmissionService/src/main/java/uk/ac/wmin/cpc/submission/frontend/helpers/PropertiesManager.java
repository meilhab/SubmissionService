/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.ac.wmin.cpc.submission.frontend.helpers;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

/**
 *
 * @author Benoit Meilhac <B.Meilhac@westminster.ac.uk>
 */
public class PropertiesManager {

    private PropertiesData listOfProperties;

    public PropertiesManager() {
        listOfProperties = new PropertiesData();
    }

    public void readProperties() throws Exception {
        Path path = getPropertiesPath();
        if (!Files.exists(path)) {
            throw new Exception("No properties file found");
        }

        String idNameProp = "submission.default.";
        Properties propFile = new Properties();
        propFile.load(Files.newInputStream(path));

        String valueServer = propFile.getProperty(idNameProp + "server");
        String valueDCI = propFile.getProperty(idNameProp + "dciBridge");
        String valueRepo = propFile.getProperty(idNameProp + "repository");
        String valueStore = propFile.getProperty(idNameProp + "storage");
        String valueClean = propFile.getProperty(idNameProp + "cleaning");
        String valueLog = propFile.getProperty(idNameProp + "log4j");

        listOfProperties.setSERVER_LOCATION(valueServer);
        listOfProperties.setDEFAULT_DCIBRIDGE_LOCATION(valueDCI);
        listOfProperties.setDEFAULT_REPOSITORY_LOCATION(valueRepo);
        listOfProperties.setDEFAULT_STORAGE_LOCATION(valueStore);
        listOfProperties.setDEFAULT_CLEANING_EXECUTABLE(checkInt(valueClean));
        listOfProperties.setDEFAULT_LOGGING_MODE((valueLog == null ? valueLog
                : valueLog.toUpperCase()));
    }

    private String checkInt(String integer) {
        try {
            Integer.parseInt(integer);
            return integer;
        } catch (NumberFormatException ex) {
        }

        return null;
    }

    public void writeProperties() throws Exception {
        String idNameProp = "submission.default.";
        Path path = getPropertiesPath();
        Properties file = new Properties();

        writeProperty(file, idNameProp + "server", listOfProperties.getSERVER_LOCATION());
        writeProperty(file, idNameProp + "dciBridge", listOfProperties.getDEFAULT_DCIBRIDGE_LOCATION());
        writeProperty(file, idNameProp + "repository", listOfProperties.getDEFAULT_REPOSITORY_LOCATION());
        writeProperty(file, idNameProp + "storage", listOfProperties.getDEFAULT_STORAGE_LOCATION());
        writeProperty(file, idNameProp + "cleaning", listOfProperties.getDEFAULT_CLEANING_EXECUTABLE());
        writeProperty(file, idNameProp + "log4j", listOfProperties.getDEFAULT_LOGGING_MODE());

        file.store(Files.newOutputStream(path), "AutoGenerated by the Submission"
                + " Service");
    }

    private void writeProperty(Properties propFile, String key, String value) {
        if (key != null && value != null) {
            propFile.setProperty(key, value);
        }
    }

    public PropertiesData getPropertiesData() {
        return listOfProperties;
    }

    public void setPropertiesData(PropertiesData data) {
        listOfProperties.setPropertiesData(data);
    }

    private Path getPropertiesPath() throws Exception {
        String userHome = System.getProperty("user.home");
        if (userHome == null) {
            throw new Exception("No user home directory defined");
        }

        return Paths.get(userHome, "submission-service.properties");
    }
}
